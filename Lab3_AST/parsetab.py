
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIFnonassocSMALLERLARGERSMALLEREQLARGEREQNOTEQEQELSEleftADDSUBDOTADDDOTSUBleftMULDIVDOTMULDOTDIVleftUMINUSrightTRANSPOSEADD ADDASSIGN ASSIGN BREAK COLON COMMA CONTINUE DIV DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR ID IF INT LARGER LARGEREQ LCURLBRACK LPARENT LSQBRACK MUL MULASSIGN NOTEQ ONES PRINT RCURLBRACK RETURN RPARENT RSQBRACK SEMICOLON SMALLER SMALLEREQ STRING SUB SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instructions instruction\n                    | instructioninstruction : assignment SEMICOLON\n                   | call SEMICOLON\n                   | loop\n                   | branch\n                   | LCURLBRACK instructions RCURLBRACKassignment : ID assignment_operator expression\n                  | ref assignment_operator expressionref : ID LSQBRACK num_term RSQBRACK\n           | ID LSQBRACK num_term COMMA num_term RSQBRACKassignment_operator : ASSIGN\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGNexpression : term\n                  | LPARENT expression RPARENTexpression : expression ADD expression %prec ADD\n                  | expression SUB expression %prec SUB\n                  | expression MUL expression %prec MUL\n                  | expression DIV expression %prec DIV\n                  | expression DOTADD expression %prec ADD\n                  | expression DOTSUB expression %prec SUB\n                  | expression DOTMUL expression %prec MUL\n                  | expression DOTDIV expression %prec DIVexpression : SUB expression %prec UMINUSexpression : expression TRANSPOSEcomparison : expression comparison_operator expressioncomparison_operator : SMALLER\n                          | LARGER\n                          | SMALLEREQ\n                          | LARGEREQ\n                          | NOTEQ\n                          | EQcall : BREAK\n            | CONTINUE\n            | RETURN expression\n            | PRINT print_inputsprint_inputs : print_inputs COMMA print_input\n                    | print_inputprint_input : STRING\n                   | IDmatrix_fun : fun_name LPARENT expression RPARENTfun_name : EYE\n                | ZEROS\n                | ONESloop : for\n            | whilefor : FOR for_expression instructionfor_expression : ID ASSIGN rangewhile : WHILE LPARENT comparison RPARENT instructionbranch : IF LPARENT comparison RPARENT instruction %prec IF\n              | IF LPARENT comparison RPARENT instruction ELSE instructionrange : num_term COLON num_termterm : ID\n            | number\n            | matrix\n            | stringnum_term : ID\n                | numbernumber : INT\n              | FLOATstring : STRINGmatrix : LSQBRACK vectors RSQBRACK\n              | vector\n              | matrix_funvectors : vectors COMMA vector\n               | vectorvector : LSQBRACK numbers RSQBRACKnumbers : numbers COMMA number\n               | num_term'
    
_lr_action_items = {'LCURLBRACK':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[8,8,-3,-6,-7,8,-49,-50,-2,-4,-5,8,-63,-64,8,-8,-61,-62,-51,8,-52,8,-54,-53,8,-56,-55,]),'ID':([0,2,3,6,7,8,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,35,40,41,42,54,55,57,58,60,62,64,65,66,67,68,69,70,71,75,80,81,84,85,88,104,105,106,107,108,109,110,111,112,114,119,121,122,124,125,126,],[9,9,-3,-6,-7,9,36,53,-49,-50,56,-2,-4,-5,9,36,60,-13,-14,-15,-16,-17,36,36,36,-63,-64,60,36,9,36,-8,-61,-62,36,36,36,36,36,36,36,36,60,36,53,-51,60,60,9,36,-31,-32,-33,-34,-35,-36,-52,9,-54,60,-53,9,-56,-55,]),'BREAK':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[11,11,-3,-6,-7,11,-49,-50,-2,-4,-5,11,-63,-64,11,-8,-61,-62,-51,11,-52,11,-54,-53,11,-56,-55,]),'CONTINUE':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[12,12,-3,-6,-7,12,-49,-50,-2,-4,-5,12,-63,-64,12,-8,-61,-62,-51,12,-52,12,-54,-53,12,-56,-55,]),'RETURN':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[13,13,-3,-6,-7,13,-49,-50,-2,-4,-5,13,-63,-64,13,-8,-61,-62,-51,13,-52,13,-54,-53,13,-56,-55,]),'PRINT':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[14,14,-3,-6,-7,14,-49,-50,-2,-4,-5,14,-63,-64,14,-8,-61,-62,-51,14,-52,14,-54,-53,14,-56,-55,]),'IF':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[17,17,-3,-6,-7,17,-49,-50,-2,-4,-5,17,-63,-64,17,-8,-61,-62,-51,17,-52,17,-54,-53,17,-56,-55,]),'FOR':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[18,18,-3,-6,-7,18,-49,-50,-2,-4,-5,18,-63,-64,18,-8,-61,-62,-51,18,-52,18,-54,-53,18,-56,-55,]),'WHILE':([0,2,3,6,7,8,15,16,20,21,22,23,40,41,55,58,60,62,84,104,112,114,119,122,124,125,126,],[19,19,-3,-6,-7,19,-49,-50,-2,-4,-5,19,-63,-64,19,-8,-61,-62,-51,19,-52,19,-54,-53,19,-56,-55,]),'$end':([1,2,3,6,7,15,16,20,21,22,58,84,119,122,126,],[0,-1,-3,-6,-7,-49,-50,-2,-4,-5,-8,-51,-54,-53,-55,]),'RCURLBRACK':([3,6,7,15,16,20,21,22,23,58,84,119,122,126,],[-3,-6,-7,-49,-50,-2,-4,-5,58,-8,-51,-54,-53,-55,]),'SEMICOLON':([4,5,11,12,32,33,36,37,38,39,40,41,43,44,45,50,51,52,53,59,63,72,74,89,90,91,92,93,94,95,96,97,98,100,103,118,],[21,22,-37,-38,-39,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-40,-42,-43,-44,-9,-10,-29,-28,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-41,-45,]),'ELSE':([6,7,15,16,21,22,58,84,119,122,126,],[-6,-7,-49,-50,-4,-5,-8,-51,124,-53,-55,]),'LSQBRACK':([9,13,24,26,27,28,29,30,31,34,35,42,54,57,64,65,66,67,68,69,70,71,80,99,105,106,107,108,109,110,111,],[25,42,42,-13,-14,-15,-16,-17,42,42,42,75,42,42,42,42,42,42,42,42,42,42,42,75,42,-31,-32,-33,-34,-35,-36,]),'ASSIGN':([9,10,56,87,123,],[26,26,85,-11,-12,]),'ADDASSIGN':([9,10,87,123,],[27,27,-11,-12,]),'SUBASSIGN':([9,10,87,123,],[28,28,-11,-12,]),'MULASSIGN':([9,10,87,123,],[29,29,-11,-12,]),'DIVASSIGN':([9,10,87,123,],[30,30,-11,-12,]),'LPARENT':([13,17,19,24,26,27,28,29,30,31,34,35,46,47,48,49,54,57,64,65,66,67,68,69,70,71,80,105,106,107,108,109,110,111,],[34,54,57,34,-13,-14,-15,-16,-17,34,34,34,80,-46,-47,-48,34,34,34,34,34,34,34,34,34,34,34,34,-31,-32,-33,-34,-35,-36,]),'SUB':([13,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,54,57,59,63,64,65,66,67,68,69,70,71,72,73,74,80,83,89,90,91,92,93,94,95,96,97,98,100,102,105,106,107,108,109,110,111,118,120,],[35,35,-13,-14,-15,-16,-17,35,65,-18,35,35,-57,-58,-59,-60,-63,-64,-67,-68,-65,35,35,65,65,35,35,35,35,35,35,35,35,-29,65,-28,35,65,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,65,35,-31,-32,-33,-34,-35,-36,-45,65,]),'INT':([13,24,25,26,27,28,29,30,31,34,35,42,54,57,64,65,66,67,68,69,70,71,75,80,85,88,101,105,106,107,108,109,110,111,121,],[40,40,40,-13,-14,-15,-16,-17,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-31,-32,-33,-34,-35,-36,40,]),'FLOAT':([13,24,25,26,27,28,29,30,31,34,35,42,54,57,64,65,66,67,68,69,70,71,75,80,85,88,101,105,106,107,108,109,110,111,121,],[41,41,41,-13,-14,-15,-16,-17,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-31,-32,-33,-34,-35,-36,41,]),'STRING':([13,14,24,26,27,28,29,30,31,34,35,54,57,64,65,66,67,68,69,70,71,80,81,105,106,107,108,109,110,111,],[45,52,45,-13,-14,-15,-16,-17,45,45,45,45,45,45,45,45,45,45,45,45,45,45,52,45,-31,-32,-33,-34,-35,-36,]),'EYE':([13,24,26,27,28,29,30,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,106,107,108,109,110,111,],[47,47,-13,-14,-15,-16,-17,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-31,-32,-33,-34,-35,-36,]),'ZEROS':([13,24,26,27,28,29,30,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,106,107,108,109,110,111,],[48,48,-13,-14,-15,-16,-17,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-31,-32,-33,-34,-35,-36,]),'ONES':([13,24,26,27,28,29,30,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,106,107,108,109,110,111,],[49,49,-13,-14,-15,-16,-17,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-31,-32,-33,-34,-35,-36,]),'ADD':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[64,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,64,64,-29,64,-28,64,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,64,-45,64,]),'MUL':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[66,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,66,66,-29,66,-28,66,66,66,-22,-23,66,66,-26,-27,-19,-66,-71,66,-45,66,]),'DIV':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[67,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,67,67,-29,67,-28,67,67,67,-22,-23,67,67,-26,-27,-19,-66,-71,67,-45,67,]),'DOTADD':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[68,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,68,68,-29,68,-28,68,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,68,-45,68,]),'DOTSUB':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[69,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,69,69,-29,69,-28,69,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,69,-45,69,]),'DOTMUL':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[70,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,70,70,-29,70,-28,70,70,70,-22,-23,70,70,-26,-27,-19,-66,-71,70,-45,70,]),'DOTDIV':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[71,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,71,71,-29,71,-28,71,71,71,-22,-23,71,71,-26,-27,-19,-66,-71,71,-45,71,]),'TRANSPOSE':([32,33,36,37,38,39,40,41,43,44,45,59,63,72,73,74,83,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[72,-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,72,72,-29,72,72,72,72,72,72,72,72,72,72,72,-19,-66,-71,72,-45,72,]),'RPARENT':([33,36,37,38,39,40,41,43,44,45,72,73,74,82,86,89,90,91,92,93,94,95,96,97,98,100,102,118,120,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,97,-28,104,114,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,118,-45,-30,]),'SMALLER':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,106,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'LARGER':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,107,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'SMALLEREQ':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,108,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'LARGEREQ':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,109,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'NOTEQ':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,110,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'EQ':([33,36,37,38,39,40,41,43,44,45,72,74,83,89,90,91,92,93,94,95,96,97,98,100,118,],[-18,-57,-58,-59,-60,-63,-64,-67,-68,-65,-29,-28,111,-20,-21,-22,-23,-24,-25,-26,-27,-19,-66,-71,-45,]),'RSQBRACK':([40,41,60,61,62,76,77,78,79,100,115,116,117,],[-63,-64,-61,87,-62,98,100,-70,-73,-71,123,-69,-72,]),'COMMA':([40,41,50,51,52,53,60,61,62,76,77,78,79,100,103,116,117,],[-63,-64,81,-42,-43,-44,-61,88,-62,99,101,-70,-73,-71,-41,-69,-72,]),'COLON':([40,41,60,62,113,],[-63,-64,-61,-62,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,8,],[2,23,]),'instruction':([0,2,8,23,55,104,114,124,],[3,20,3,20,84,119,122,126,]),'assignment':([0,2,8,23,55,104,114,124,],[4,4,4,4,4,4,4,4,]),'call':([0,2,8,23,55,104,114,124,],[5,5,5,5,5,5,5,5,]),'loop':([0,2,8,23,55,104,114,124,],[6,6,6,6,6,6,6,6,]),'branch':([0,2,8,23,55,104,114,124,],[7,7,7,7,7,7,7,7,]),'ref':([0,2,8,23,55,104,114,124,],[10,10,10,10,10,10,10,10,]),'for':([0,2,8,23,55,104,114,124,],[15,15,15,15,15,15,15,15,]),'while':([0,2,8,23,55,104,114,124,],[16,16,16,16,16,16,16,16,]),'assignment_operator':([9,10,],[24,31,]),'expression':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[32,59,63,73,74,83,83,89,90,91,92,93,94,95,96,102,120,]),'term':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'number':([13,24,25,31,34,35,42,54,57,64,65,66,67,68,69,70,71,75,80,85,88,101,105,121,],[37,37,62,37,37,37,62,37,37,37,37,37,37,37,37,37,37,62,37,62,62,117,37,62,]),'matrix':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'string':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'vector':([13,24,31,34,35,42,54,57,64,65,66,67,68,69,70,71,80,99,105,],[43,43,43,43,43,78,43,43,43,43,43,43,43,43,43,43,43,116,43,]),'matrix_fun':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'fun_name':([13,24,31,34,35,54,57,64,65,66,67,68,69,70,71,80,105,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'print_inputs':([14,],[50,]),'print_input':([14,81,],[51,103,]),'for_expression':([18,],[55,]),'num_term':([25,42,75,85,88,121,],[61,79,79,113,115,125,]),'vectors':([42,],[76,]),'numbers':([42,75,],[77,77,]),'comparison':([54,57,],[82,86,]),'comparison_operator':([83,],[105,]),'range':([85,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',31),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',35),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',36),
  ('instruction -> assignment SEMICOLON','instruction',2,'p_instruction','Mparser.py',40),
  ('instruction -> call SEMICOLON','instruction',2,'p_instruction','Mparser.py',41),
  ('instruction -> loop','instruction',1,'p_instruction','Mparser.py',42),
  ('instruction -> branch','instruction',1,'p_instruction','Mparser.py',43),
  ('instruction -> LCURLBRACK instructions RCURLBRACK','instruction',3,'p_instruction','Mparser.py',44),
  ('assignment -> ID assignment_operator expression','assignment',3,'p_assignment','Mparser.py',48),
  ('assignment -> ref assignment_operator expression','assignment',3,'p_assignment','Mparser.py',49),
  ('ref -> ID LSQBRACK num_term RSQBRACK','ref',4,'p_ref','Mparser.py',53),
  ('ref -> ID LSQBRACK num_term COMMA num_term RSQBRACK','ref',6,'p_ref','Mparser.py',54),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',58),
  ('assignment_operator -> ADDASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',59),
  ('assignment_operator -> SUBASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',60),
  ('assignment_operator -> MULASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',61),
  ('assignment_operator -> DIVASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',62),
  ('expression -> term','expression',1,'p_expression','Mparser.py',66),
  ('expression -> LPARENT expression RPARENT','expression',3,'p_expression','Mparser.py',67),
  ('expression -> expression ADD expression','expression',3,'p_num_expression_binary','Mparser.py',71),
  ('expression -> expression SUB expression','expression',3,'p_num_expression_binary','Mparser.py',72),
  ('expression -> expression MUL expression','expression',3,'p_num_expression_binary','Mparser.py',73),
  ('expression -> expression DIV expression','expression',3,'p_num_expression_binary','Mparser.py',74),
  ('expression -> expression DOTADD expression','expression',3,'p_num_expression_binary','Mparser.py',75),
  ('expression -> expression DOTSUB expression','expression',3,'p_num_expression_binary','Mparser.py',76),
  ('expression -> expression DOTMUL expression','expression',3,'p_num_expression_binary','Mparser.py',77),
  ('expression -> expression DOTDIV expression','expression',3,'p_num_expression_binary','Mparser.py',78),
  ('expression -> SUB expression','expression',2,'p_expression_negation','Mparser.py',82),
  ('expression -> expression TRANSPOSE','expression',2,'p_expression_transpose','Mparser.py',86),
  ('comparison -> expression comparison_operator expression','comparison',3,'p_comparison','Mparser.py',91),
  ('comparison_operator -> SMALLER','comparison_operator',1,'p_comparison_operator','Mparser.py',95),
  ('comparison_operator -> LARGER','comparison_operator',1,'p_comparison_operator','Mparser.py',96),
  ('comparison_operator -> SMALLEREQ','comparison_operator',1,'p_comparison_operator','Mparser.py',97),
  ('comparison_operator -> LARGEREQ','comparison_operator',1,'p_comparison_operator','Mparser.py',98),
  ('comparison_operator -> NOTEQ','comparison_operator',1,'p_comparison_operator','Mparser.py',99),
  ('comparison_operator -> EQ','comparison_operator',1,'p_comparison_operator','Mparser.py',100),
  ('call -> BREAK','call',1,'p_call','Mparser.py',104),
  ('call -> CONTINUE','call',1,'p_call','Mparser.py',105),
  ('call -> RETURN expression','call',2,'p_call','Mparser.py',106),
  ('call -> PRINT print_inputs','call',2,'p_call','Mparser.py',107),
  ('print_inputs -> print_inputs COMMA print_input','print_inputs',3,'p_print_inputs','Mparser.py',111),
  ('print_inputs -> print_input','print_inputs',1,'p_print_inputs','Mparser.py',112),
  ('print_input -> STRING','print_input',1,'p_print_input','Mparser.py',116),
  ('print_input -> ID','print_input',1,'p_print_input','Mparser.py',117),
  ('matrix_fun -> fun_name LPARENT expression RPARENT','matrix_fun',4,'p_matrix_fun','Mparser.py',121),
  ('fun_name -> EYE','fun_name',1,'p_fun_name','Mparser.py',125),
  ('fun_name -> ZEROS','fun_name',1,'p_fun_name','Mparser.py',126),
  ('fun_name -> ONES','fun_name',1,'p_fun_name','Mparser.py',127),
  ('loop -> for','loop',1,'p_loop','Mparser.py',131),
  ('loop -> while','loop',1,'p_loop','Mparser.py',132),
  ('for -> FOR for_expression instruction','for',3,'p_for','Mparser.py',136),
  ('for_expression -> ID ASSIGN range','for_expression',3,'p_for_expression','Mparser.py',140),
  ('while -> WHILE LPARENT comparison RPARENT instruction','while',5,'p_while','Mparser.py',144),
  ('branch -> IF LPARENT comparison RPARENT instruction','branch',5,'p_branch','Mparser.py',148),
  ('branch -> IF LPARENT comparison RPARENT instruction ELSE instruction','branch',7,'p_branch','Mparser.py',149),
  ('range -> num_term COLON num_term','range',3,'p_range','Mparser.py',153),
  ('term -> ID','term',1,'p_term','Mparser.py',157),
  ('term -> number','term',1,'p_term','Mparser.py',158),
  ('term -> matrix','term',1,'p_term','Mparser.py',159),
  ('term -> string','term',1,'p_term','Mparser.py',160),
  ('num_term -> ID','num_term',1,'p_num_term','Mparser.py',164),
  ('num_term -> number','num_term',1,'p_num_term','Mparser.py',165),
  ('number -> INT','number',1,'p_number','Mparser.py',169),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',170),
  ('string -> STRING','string',1,'p_string','Mparser.py',174),
  ('matrix -> LSQBRACK vectors RSQBRACK','matrix',3,'p_matrix','Mparser.py',178),
  ('matrix -> vector','matrix',1,'p_matrix','Mparser.py',179),
  ('matrix -> matrix_fun','matrix',1,'p_matrix','Mparser.py',180),
  ('vectors -> vectors COMMA vector','vectors',3,'p_vectors','Mparser.py',184),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',185),
  ('vector -> LSQBRACK numbers RSQBRACK','vector',3,'p_vector','Mparser.py',189),
  ('numbers -> numbers COMMA number','numbers',3,'p_vector_contents','Mparser.py',193),
  ('numbers -> num_term','numbers',1,'p_vector_contents','Mparser.py',194),
]
