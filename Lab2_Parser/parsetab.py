
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIFnonassocSMALLERLARGERSMALLEREQLARGEREQNOTEQEQELSEnonassocASSIGNADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleftADDSUBDOTADDDOTSUBleftMULDIVDOTMULDOTDIVleftUMINUSrightTRANSPOSEADD ADDASSIGN ASSIGN BREAK COLON COMMA CONTINUE DIV DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR ID IF INT LARGER LARGEREQ LCURLBRACK LPARENT LSQBRACK MUL MULASSIGN NOTEQ ONES PRINT RCURLBRACK RETURN RPARENT RSQBRACK SEMICOLON SMALLER SMALLEREQ STRING SUB SUBASSIGN TRANSPOSE WHILE ZEROSprogram : program block\n               | blockblock : LCURLBRACK block RCURLBRACK\n             | LCURLBRACK empty RCURLBRACK\n             | block instruction\n             | instructionempty :instruction : assignment SEMICOLON\n                   | call SEMICOLON\n                   | loop\n                   | branchassignment : ID assignment_operator expressionassignment_operator : ASSIGN\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGNcall : sys_call\n            | fun_callsys_call : BREAK\n                | CONTINUE\n                | RETURN expressionfun_call : matrix_fun\n                | printmatrix_fun : fun_name LPARENT num_expression RPARENTfun_name : EYE\n                | ZEROS\n                | ONESprint : PRINT LPARENT string_expression RPARENTloop : for\n            | whilefor : FOR for_expression blockfor_expression : ID ASSIGN num_term COLON num_termwhile : WHILE LPARENT comparison RPARENT blockbranch : IF LPARENT comparison RPARENT block %prec IF\n              | IF LPARENT comparison RPARENT block ELSE blockterm : ID\n                | number\n                | matrix\n                | stringnum_term : ID\n                | numbermatrix_term : ID\n                | matrixstring_term : ID\n                | STRINGnumber : INT\n              | FLOATstring : STRINGmatrix : LSQBRACK matrix_contents RSQBRACKmatrix_contents : matrix_contents COMMA matrix_content\n                       | matrix_contentmatrix_content : matrix_term\n                      | emptyexpression : termnum_expression : num_termmatrix_expression : matrix_termstring_expression : string_termexpression : num_expression ADD num_expression\n                  | num_expression SUB num_expression\n                  | num_expression MUL num_expression\n                  | num_expression DIV num_expression\n                  | matrix_expression DOTADD matrix_expression\n                  | matrix_expression DOTSUB matrix_expression\n                  | matrix_expression DOTMUL matrix_expression\n                  | matrix_expression DOTDIV matrix_expressioncomparison : num_expression comparison_operator num_expressioncomparison_operator : SMALLER\n                          | LARGER\n                          | SMALLEREQ\n                          | LARGEREQ\n                          | NOTEQ\n                          | EQexpression : SUB expression %prec UMINUSexpression : expression TRANSPOSE'
    
_lr_action_items = {'LCURLBRACK':([0,1,2,3,4,7,8,12,13,27,28,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[3,3,-2,3,-6,-10,-11,-30,-31,-1,-5,-8,-9,-47,-48,3,-3,-4,-41,-42,-32,3,3,-35,-34,3,-33,-36,]),'ID':([0,1,2,3,4,7,8,12,13,17,20,27,28,29,31,32,33,34,35,36,37,38,39,43,51,52,53,55,57,58,59,60,61,65,66,68,69,70,71,73,74,75,76,83,84,91,92,93,94,95,96,97,98,108,110,113,116,117,118,119,120,],[9,9,9,9,-6,-10,-11,-30,-31,45,56,9,-5,9,-8,-9,45,-13,-14,-15,-16,-17,65,45,-47,-48,81,9,65,65,89,-3,-4,-41,-42,65,65,65,65,81,81,81,81,9,65,9,65,-68,-69,-70,-71,-72,-73,81,9,-35,65,9,9,-33,-36,]),'IF':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[14,14,14,14,-6,-10,-11,-30,-31,14,-5,14,-8,-9,-47,-48,14,-3,-4,-41,-42,14,14,14,14,14,14,-33,-36,]),'BREAK':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[15,15,15,15,-6,-10,-11,-30,-31,15,-5,15,-8,-9,-47,-48,15,-3,-4,-41,-42,15,15,15,-35,15,15,-33,-36,]),'CONTINUE':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[16,16,16,16,-6,-10,-11,-30,-31,16,-5,16,-8,-9,-47,-48,16,-3,-4,-41,-42,16,16,16,-35,16,16,-33,-36,]),'RETURN':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[17,17,17,17,-6,-10,-11,-30,-31,17,-5,17,-8,-9,-47,-48,17,-3,-4,-41,-42,17,17,17,-35,17,17,-33,-36,]),'FOR':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[20,20,20,20,-6,-10,-11,-30,-31,20,-5,20,-8,-9,-47,-48,20,-3,-4,-41,-42,20,20,20,-35,20,20,-33,-36,]),'WHILE':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[21,21,21,21,-6,-10,-11,-30,-31,21,-5,21,-8,-9,-47,-48,21,-3,-4,-41,-42,21,21,21,-35,21,21,-33,-36,]),'PRINT':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[23,23,23,23,-6,-10,-11,-30,-31,23,-5,23,-8,-9,-47,-48,23,-3,-4,-41,-42,23,23,23,-35,23,23,-33,-36,]),'EYE':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[24,24,24,24,-6,-10,-11,-30,-31,24,-5,24,-8,-9,-47,-48,24,-3,-4,-41,-42,24,24,24,-35,24,24,-33,-36,]),'ZEROS':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[25,25,25,25,-6,-10,-11,-30,-31,25,-5,25,-8,-9,-47,-48,25,-3,-4,-41,-42,25,25,25,-35,25,25,-33,-36,]),'ONES':([0,1,2,3,4,7,8,12,13,27,28,29,31,32,51,52,55,60,61,65,66,83,91,110,113,117,118,119,120,],[26,26,26,26,-6,-10,-11,-30,-31,26,-5,26,-8,-9,-47,-48,26,-3,-4,-41,-42,26,26,26,-35,26,26,-33,-36,]),'$end':([1,2,4,7,8,12,13,27,28,31,32,60,61,83,113,117,120,],[0,-2,-6,-10,-11,-30,-31,-1,-5,-8,-9,-3,-4,-32,-35,-34,-36,]),'RCURLBRACK':([3,4,7,8,12,13,28,29,30,31,32,60,61,83,113,117,120,],[-7,-6,-10,-11,-30,-31,-5,60,61,-8,-9,-3,-4,-32,-35,-34,-36,]),'ELSE':([4,7,8,12,13,28,31,32,60,61,83,113,117,120,],[-6,-10,-11,-30,-31,-5,-8,-9,-3,-4,-32,118,-34,-36,]),'SEMICOLON':([5,6,10,11,15,16,18,19,40,41,45,46,47,48,49,50,51,52,54,62,65,66,67,72,81,82,99,100,101,102,103,104,105,106,107,111,112,],[31,32,-18,-19,-20,-21,-23,-24,-22,-55,-37,-38,-39,-40,-56,-57,-47,-48,-49,-12,-41,-42,-75,-74,-43,-44,-59,-60,-61,-62,-63,-64,-65,-66,-50,-25,-29,]),'ASSIGN':([9,56,],[34,84,]),'ADDASSIGN':([9,],[35,]),'SUBASSIGN':([9,],[36,]),'MULASSIGN':([9,],[37,]),'DIVASSIGN':([9,],[38,]),'LPARENT':([14,21,22,23,24,25,26,],[39,57,58,59,-26,-27,-28,]),'SUB':([17,33,34,35,36,37,38,42,43,45,46,49,51,52,],[43,43,-13,-14,-15,-16,-17,69,43,-41,-42,-56,-47,-48,]),'INT':([17,33,34,35,36,37,38,39,43,57,58,68,69,70,71,84,92,93,94,95,96,97,98,116,],[51,51,-13,-14,-15,-16,-17,51,51,51,51,51,51,51,51,51,51,-68,-69,-70,-71,-72,-73,51,]),'FLOAT':([17,33,34,35,36,37,38,39,43,57,58,68,69,70,71,84,92,93,94,95,96,97,98,116,],[52,52,-13,-14,-15,-16,-17,52,52,52,52,52,52,52,52,52,52,-68,-69,-70,-71,-72,-73,52,]),'LSQBRACK':([17,33,34,35,36,37,38,43,53,73,74,75,76,108,],[53,53,-13,-14,-15,-16,-17,53,53,53,53,53,53,53,]),'STRING':([17,33,34,35,36,37,38,43,59,],[54,54,-13,-14,-15,-16,-17,54,90,]),'TRANSPOSE':([40,41,45,46,47,48,49,50,51,52,54,62,65,66,67,72,81,82,99,100,101,102,103,104,105,106,107,],[67,-55,-37,-38,-39,-40,-56,-57,-47,-48,-49,67,-41,-42,-75,67,-43,-44,-59,-60,-61,-62,-63,-64,-65,-66,-50,]),'ADD':([42,45,46,49,51,52,],[68,-41,-42,-56,-47,-48,]),'MUL':([42,45,46,49,51,52,],[70,-41,-42,-56,-47,-48,]),'DIV':([42,45,46,49,51,52,],[71,-41,-42,-56,-47,-48,]),'DOTADD':([44,45,47,50,107,],[73,-43,-44,-57,-50,]),'DOTSUB':([44,45,47,50,107,],[74,-43,-44,-57,-50,]),'DOTMUL':([44,45,47,50,107,],[75,-43,-44,-57,-50,]),'DOTDIV':([44,45,47,50,107,],[76,-43,-44,-57,-50,]),'SMALLER':([49,51,52,64,65,66,],[-56,-47,-48,93,-41,-42,]),'LARGER':([49,51,52,64,65,66,],[-56,-47,-48,94,-41,-42,]),'SMALLEREQ':([49,51,52,64,65,66,],[-56,-47,-48,95,-41,-42,]),'LARGEREQ':([49,51,52,64,65,66,],[-56,-47,-48,96,-41,-42,]),'NOTEQ':([49,51,52,64,65,66,],[-56,-47,-48,97,-41,-42,]),'EQ':([49,51,52,64,65,66,],[-56,-47,-48,98,-41,-42,]),'RPARENT':([49,51,52,63,65,66,85,86,87,88,89,90,114,],[-56,-47,-48,91,-41,-42,110,111,112,-58,-45,-46,-67,]),'COLON':([51,52,65,66,109,],[-47,-48,-41,-42,116,]),'RSQBRACK':([53,77,78,79,80,81,82,107,108,115,],[-7,107,-52,-53,-54,-43,-44,-50,-7,-51,]),'COMMA':([53,77,78,79,80,81,82,107,108,115,],[-7,108,-52,-53,-54,-43,-44,-50,-7,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,1,3,55,91,110,118,],[2,27,29,83,113,117,120,]),'instruction':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[4,4,28,4,28,28,4,28,4,4,28,28,4,28,]),'assignment':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'call':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'loop':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'branch':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'sys_call':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'fun_call':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'for':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'while':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'matrix_fun':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'print':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'fun_name':([0,1,2,3,27,29,55,83,91,110,113,117,118,120,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'empty':([3,53,108,],[30,80,80,]),'assignment_operator':([9,],[33,]),'expression':([17,33,43,],[40,62,72,]),'term':([17,33,43,],[41,41,41,]),'num_expression':([17,33,39,43,57,58,68,69,70,71,92,],[42,42,64,42,64,86,99,100,101,102,114,]),'matrix_expression':([17,33,43,73,74,75,76,],[44,44,44,103,104,105,106,]),'number':([17,33,39,43,57,58,68,69,70,71,84,92,116,],[46,46,66,46,66,66,66,66,66,66,66,66,66,]),'matrix':([17,33,43,53,73,74,75,76,108,],[47,47,47,82,82,82,82,82,82,]),'string':([17,33,43,],[48,48,48,]),'num_term':([17,33,39,43,57,58,68,69,70,71,84,92,116,],[49,49,49,49,49,49,49,49,49,49,109,49,119,]),'matrix_term':([17,33,43,53,73,74,75,76,108,],[50,50,50,79,50,50,50,50,79,]),'for_expression':([20,],[55,]),'comparison':([39,57,],[63,85,]),'matrix_contents':([53,],[77,]),'matrix_content':([53,108,],[78,115,]),'string_expression':([59,],[87,]),'string_term':([59,],[88,]),'comparison_operator':([64,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program block','program',2,'p_program','Mparser.py',31),
  ('program -> block','program',1,'p_program','Mparser.py',32),
  ('block -> LCURLBRACK block RCURLBRACK','block',3,'p_block','Mparser.py',36),
  ('block -> LCURLBRACK empty RCURLBRACK','block',3,'p_block','Mparser.py',37),
  ('block -> block instruction','block',2,'p_block','Mparser.py',38),
  ('block -> instruction','block',1,'p_block','Mparser.py',39),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',43),
  ('instruction -> assignment SEMICOLON','instruction',2,'p_instruction','Mparser.py',48),
  ('instruction -> call SEMICOLON','instruction',2,'p_instruction','Mparser.py',49),
  ('instruction -> loop','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> branch','instruction',1,'p_instruction','Mparser.py',51),
  ('assignment -> ID assignment_operator expression','assignment',3,'p_assignment','Mparser.py',56),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',60),
  ('assignment_operator -> ADDASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',61),
  ('assignment_operator -> SUBASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',62),
  ('assignment_operator -> MULASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',63),
  ('assignment_operator -> DIVASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',64),
  ('call -> sys_call','call',1,'p_call','Mparser.py',70),
  ('call -> fun_call','call',1,'p_call','Mparser.py',71),
  ('sys_call -> BREAK','sys_call',1,'p_sys_call','Mparser.py',76),
  ('sys_call -> CONTINUE','sys_call',1,'p_sys_call','Mparser.py',77),
  ('sys_call -> RETURN expression','sys_call',2,'p_sys_call','Mparser.py',78),
  ('fun_call -> matrix_fun','fun_call',1,'p_fun_call','Mparser.py',82),
  ('fun_call -> print','fun_call',1,'p_fun_call','Mparser.py',83),
  ('matrix_fun -> fun_name LPARENT num_expression RPARENT','matrix_fun',4,'p_matrix_fun','Mparser.py',87),
  ('fun_name -> EYE','fun_name',1,'p_fun_name','Mparser.py',91),
  ('fun_name -> ZEROS','fun_name',1,'p_fun_name','Mparser.py',92),
  ('fun_name -> ONES','fun_name',1,'p_fun_name','Mparser.py',93),
  ('print -> PRINT LPARENT string_expression RPARENT','print',4,'p_print','Mparser.py',97),
  ('loop -> for','loop',1,'p_loop','Mparser.py',102),
  ('loop -> while','loop',1,'p_loop','Mparser.py',103),
  ('for -> FOR for_expression block','for',3,'p_for','Mparser.py',107),
  ('for_expression -> ID ASSIGN num_term COLON num_term','for_expression',5,'p_for_expression','Mparser.py',111),
  ('while -> WHILE LPARENT comparison RPARENT block','while',5,'p_while','Mparser.py',115),
  ('branch -> IF LPARENT comparison RPARENT block','branch',5,'p_branch','Mparser.py',120),
  ('branch -> IF LPARENT comparison RPARENT block ELSE block','branch',7,'p_branch','Mparser.py',121),
  ('term -> ID','term',1,'p_term','Mparser.py',125),
  ('term -> number','term',1,'p_term','Mparser.py',126),
  ('term -> matrix','term',1,'p_term','Mparser.py',127),
  ('term -> string','term',1,'p_term','Mparser.py',128),
  ('num_term -> ID','num_term',1,'p_num_term','Mparser.py',132),
  ('num_term -> number','num_term',1,'p_num_term','Mparser.py',133),
  ('matrix_term -> ID','matrix_term',1,'p_matrix_term','Mparser.py',137),
  ('matrix_term -> matrix','matrix_term',1,'p_matrix_term','Mparser.py',138),
  ('string_term -> ID','string_term',1,'p_string_term','Mparser.py',142),
  ('string_term -> STRING','string_term',1,'p_string_term','Mparser.py',143),
  ('number -> INT','number',1,'p_number','Mparser.py',147),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',148),
  ('string -> STRING','string',1,'p_string','Mparser.py',152),
  ('matrix -> LSQBRACK matrix_contents RSQBRACK','matrix',3,'p_matrix','Mparser.py',157),
  ('matrix_contents -> matrix_contents COMMA matrix_content','matrix_contents',3,'p_matrix_contents','Mparser.py',161),
  ('matrix_contents -> matrix_content','matrix_contents',1,'p_matrix_contents','Mparser.py',162),
  ('matrix_content -> matrix_term','matrix_content',1,'p_matrix_content','Mparser.py',166),
  ('matrix_content -> empty','matrix_content',1,'p_matrix_content','Mparser.py',167),
  ('expression -> term','expression',1,'p_expression_term','Mparser.py',171),
  ('num_expression -> num_term','num_expression',1,'p_expression_num_term','Mparser.py',175),
  ('matrix_expression -> matrix_term','matrix_expression',1,'p_expression_matrix_term','Mparser.py',179),
  ('string_expression -> string_term','string_expression',1,'p_expression_string_term','Mparser.py',183),
  ('expression -> num_expression ADD num_expression','expression',3,'p_expression_binary','Mparser.py',188),
  ('expression -> num_expression SUB num_expression','expression',3,'p_expression_binary','Mparser.py',189),
  ('expression -> num_expression MUL num_expression','expression',3,'p_expression_binary','Mparser.py',190),
  ('expression -> num_expression DIV num_expression','expression',3,'p_expression_binary','Mparser.py',191),
  ('expression -> matrix_expression DOTADD matrix_expression','expression',3,'p_expression_binary','Mparser.py',192),
  ('expression -> matrix_expression DOTSUB matrix_expression','expression',3,'p_expression_binary','Mparser.py',193),
  ('expression -> matrix_expression DOTMUL matrix_expression','expression',3,'p_expression_binary','Mparser.py',194),
  ('expression -> matrix_expression DOTDIV matrix_expression','expression',3,'p_expression_binary','Mparser.py',195),
  ('comparison -> num_expression comparison_operator num_expression','comparison',3,'p_comparison','Mparser.py',217),
  ('comparison_operator -> SMALLER','comparison_operator',1,'p_comparison_operator','Mparser.py',234),
  ('comparison_operator -> LARGER','comparison_operator',1,'p_comparison_operator','Mparser.py',235),
  ('comparison_operator -> SMALLEREQ','comparison_operator',1,'p_comparison_operator','Mparser.py',236),
  ('comparison_operator -> LARGEREQ','comparison_operator',1,'p_comparison_operator','Mparser.py',237),
  ('comparison_operator -> NOTEQ','comparison_operator',1,'p_comparison_operator','Mparser.py',238),
  ('comparison_operator -> EQ','comparison_operator',1,'p_comparison_operator','Mparser.py',239),
  ('expression -> SUB expression','expression',2,'p_expression_negation','Mparser.py',246),
  ('expression -> expression TRANSPOSE','expression',2,'p_expression_transpose','Mparser.py',252),
]
